<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-12-14T00:37:39+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Discardable Result</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Signed Unsigned with Shuri &amp;amp; Scott</title><link href="http://localhost:4000/jekyll/update/2020/12/12/signed-unsigned.html" rel="alternate" type="text/html" title="Signed Unsigned with Shuri &amp;amp; Scott" /><published>2020-12-12T23:23:19+05:30</published><updated>2020-12-12T23:23:19+05:30</updated><id>http://localhost:4000/jekyll/update/2020/12/12/signed-unsigned</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/12/12/signed-unsigned.html">&lt;p&gt;&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Heyy &lt;em&gt;Shuri&lt;/em&gt;!!&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Heyy &lt;em&gt;Scott&lt;/em&gt;!!&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Need your help to understand about data types and their range.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - You meanâ€¦Integer, Float, Double, etc ?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Yes Yes.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - I am very confused. Thereâ€™s signed data type, unsigned data type, Int32, Float32,Â  Int64, doubleâ€¦.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Okay Okay Okayâ€¦got it. Letâ€™s take Integer data type to understand this.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Perfect!&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; -Â So,Â Integer can be of 8 bits which is represented by Int8, 16 bits represented by Int16, 32 bits represented by Int32 and so onâ€¦&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - A bit can store either value 0 or 1. That means 2 possible values.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0    or    1&lt;/code&gt;&lt;br /&gt;
2 bits can store 2 values(0 or 1) for each bit, that means we can represent or store 22 possible values with 2 bits.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0   0Â Â Â  -&amp;gt;Â Â  0
0   1Â Â Â  -&amp;gt;Â Â  1
1   0Â Â Â  -&amp;gt;Â Â  2
1   1 Â Â  -&amp;gt;Â Â  3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Â  Â  Â  Â  Â  Â  Â Â  
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Okay, that means with Int2, we can represent 0, 1, 2 &amp;amp; 3. So, then the rangeÂ  for Int2 will be [0, 3], right?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Ummâ€¦wrong. The range for Unsigned Int2 would be [0, 3],Â  not for a signed Int2.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Before you even ask, Unsigned Ints are non negative.Â  And, Signed Int will have both negative and positive values.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Okay..but how do we represent a negative value in bit? You can only put 0 or 1 right?&lt;br /&gt;
                You canâ€™t put a -ve or +ve sign.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Correct, you canâ€™t put -ve or +ve sign. But, there are ways to represent a negative value.&lt;br /&gt;
Â  Â  Â  Â Â  Â  Â  Â Â  One way is to invert the digits and add 1 to it.&lt;br /&gt;
Â  Â  Â  Â  Â  Â  Â  Â Â The resultant would represent its negative value. Lets take 01 which represents 1.&lt;br /&gt;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â  01 -&amp;gt; invert digitsÂ  -&amp;gt; 10 -&amp;gt; add 1 -&amp;gt; 11&lt;br /&gt;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â  Now, 11 represents -1.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Also, inverting of digits and adding 1 to it is called 2â€™s complement.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - So, 11 which we used to represent 3 for unsigned Int2,&lt;br /&gt;
               can now now be used to represent -1 for signed Int2 right?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Thatâ€™s correct.Â  And, 1 0 can be used to represent -2, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2's complement&lt;/code&gt; of 1 0 is 1 0.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - This way with the same number of bits we can be used to represent both positive and negative values.&lt;br /&gt;
          Signed Int2 will have these values:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0   0Â Â Â  -&amp;gt;Â  Â 0
0   1Â Â Â  -&amp;gt;Â  Â 1
1   0Â Â Â  -&amp;gt;Â  -2
1   1Â Â Â  -&amp;gt;Â  -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Got it. Now if we look at signed Int2â€™s range, itâ€™s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[-2, 1]&lt;/code&gt;. It does not include 2 and 3 as we have used these to represent negative numbers, -2Â  &amp;amp; -1 respectively.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Exactly!&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Okayâ€¦now what if I want to store 3 for a signed Int?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; -Â  For a signed Int, we donâ€™t have space to store 3 with just 2 bits, as with 2 bits we can only store values till 1.&lt;br /&gt;
Â  Â  Â  Â  Â  Â  Â  Â Â  With 3 bits, you can store ranging from -4 to 3.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0   0Â   1Â Â  -&amp;gt;Â  1 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 1   0Â   1Â Â Â  -&amp;gt;Â Â  -3
0   1Â   0Â Â  -&amp;gt;Â  2 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 1   1Â   0Â Â Â  -&amp;gt;Â Â  -2
0   1Â   1Â Â  -&amp;gt;Â  3 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 1   1Â   1Â Â Â  -&amp;gt;Â Â  -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Now if you see, we can actually deduce a formula for both signed and unsigned ranges.&lt;br /&gt;
For n bits, unsigned range would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[0, 2n - 1]&lt;/code&gt;, and for signed range it would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[-2n-1, 2n-1 - 1]&lt;/code&gt;.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - So, is it correct to say that signed data types reduces the range, as with unsigned we can represent more values?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - I would not say it reduces the range, it actually shifts the range from positive values to negative values.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Makes sense. Okay, I have one last question, when we declare just Integer (Int) as data type, is that unsigned or signed?&lt;br /&gt;
              And, how many bits it stores, because when we write Int we donâ€™t mention number of bits there?&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Good question!! By default itâ€™s signed. To make it unsigned, we have to write UInt.&lt;br /&gt;
Â  Â  Â  Â  Â  Â  Â  And, how many bits it stores is dependent on the platform.&lt;br /&gt;
Â  Â  Â  Â  Â  Â  Â  On 32 bit platform, it behaves as Int32. On 64 bit platform, it behaves as Int64.&lt;br /&gt;
Â  Â  Â  Â  Â  Â  Â  You can actually check Swift documentation for Int which tells the same thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Noiceeee. Thanks &lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt;ðŸ™‚&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Shuri&lt;/em&gt;&lt;/strong&gt; - Anytime ðŸ™‚ And,Â donâ€™t forget to check other Data Types and their range.&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;Scott&lt;/em&gt;&lt;/strong&gt; - Already on itâ€¦&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Scott - Heyy Shuri!! Shuri - Heyy Scott!! Scott - Need your help to understand about data types and their range. Shuri - You meanâ€¦Integer, Float, Double, etc ? Scott - Yes Yes. Scott - I am very confused. Thereâ€™s signed data type, unsigned data type, Int32, Float32,Â  Int64, doubleâ€¦. Shuri - Okay Okay Okayâ€¦got it. Letâ€™s take Integer data type to understand this. Scott - Perfect! Shuri -Â So,Â Integer can be of 8 bits which is represented by Int8, 16 bits represented by Int16, 32 bits represented by Int32 and so onâ€¦ Shuri - A bit can store either value 0 or 1. That means 2 possible values. 0 or 1 2 bits can store 2 values(0 or 1) for each bit, that means we can represent or store 22 possible values with 2 bits.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2020/12/03/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-12-03T23:23:19+05:30</published><updated>2020-12-03T23:23:19+05:30</updated><id>http://localhost:4000/jekyll/update/2020/12/03/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/12/03/welcome-to-jekyll.html">&lt;p&gt;Youâ€™ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyllâ€™s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Youâ€™ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>
I"<p><em>Scott</em> - Heyy <em>Shuri</em>!!<br />
<em>Shuri</em> - Heyy <em>Scott</em>!!<br />
<em>Scott</em> - Need your help to understand about data types and their range.<br />
<em>Shuri</em> - You meanâ€¦Integer, Float, Double, etc ?<br />
<em>Scott</em> - Yes Yes.<br />
<em>Scott</em> - I am very confused. Thereâ€™s signed data type, unsigned data type, Int32, Float32,Â  Int64, doubleâ€¦.<br />
<em>Shuri</em> - Okay Okay Okayâ€¦got it. Letâ€™s take Integer data type to understand this.<br />
<em>Scott</em> - Perfect!<br />
<em>Shuri</em> -Â So,Â Integer can be of 8 bits which is represented by Int8, 16 bits represented by Int16, 32 bits represented by Int32 and so onâ€¦<br />
<em>Shuri</em> - A bit can store either value 0 or 1. That means 2 possible values.<br />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â 0Â  Â  Â  orÂ  Â  1<br />
2 bits can store 2 values(0 or 1) for each bit, that means we can represent or store 22 possible values with 2 bits.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    0   0Â Â Â  -&gt;Â Â  0
    0   1Â Â Â  -&gt;Â Â  1
    1   0Â Â Â  -&gt;Â Â  2
    1   1 Â Â  -&gt;Â Â  3
</code></pre></div></div>
<p>Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â 
			Â  Â  Â  Â  Â  Â  Â  Â Â  
<em>Scott</em> - Okay, that means with Int2, we can represent 0, 1, 2 &amp; 3. So, then the rangeÂ  for Int2 will be [0, 3], right?<br />
<em>Shuri</em> - Ummâ€¦wrong. The range for Unsigned Int2 would be [0, 3],Â  not for a signed Int2.<br />
<em>Shuri</em> - Before you even ask, Unsigned Ints are non negative.Â  And, Signed Int will have both negative and positive values.<br />
<em>Scott</em> - Okay..but how do we represent a negative value in bit? You can only put 0 or 1 right?<br />
                You canâ€™t put a -ve or +ve sign.<br />
<em>Shuri</em> - Correct, you canâ€™t put -ve or +ve sign. But, there are ways to represent a negative value.<br />
Â  Â  Â  Â Â  Â  Â  Â Â  One way is to invert the digits and add 1 to it.<br />
Â  Â  Â  Â  Â  Â  Â  Â Â The resultant would represent its negative value. Lets take 01 which represents 1.<br />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â  01 -&gt; invert digitsÂ  -&gt; 10 -&gt; add 1 -&gt; 11<br />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â  Now, 11 represents -1.<br />
<em>Shuri</em> - Also, inverting of digits and adding 1 to it is called 2â€™s complement.<br />
<em>Scott</em> - So, 11 which we used to represent 3 for unsigned Int2,<br />
               can now now be used to represent -1 for signed Int2 right?<br />
<em>Shuri</em> - Thatâ€™s correct.Â  And, 1 0 can be used to represent -2, since 2â€™s complement of 1 0 is 1 0.<br />
<em>Shuri</em> - This way with the same number of bits we can be used to represent both positive and negative values.<br />
          Signed Int2 will have these values:<br />
Â  Â  Â  Â  Â  Â  Â  Â Â  Â  Â  Â  Â  Â  Â  Â Â Â  Â  Â  Â  Â  Â  Â Â  Â 0   0Â Â Â  -&gt;Â  Â  0
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â Â  Â 0   1Â Â Â  -&gt;Â  Â  1
			Â  Â  Â  Â  Â  Â  Â  Â Â Â  Â 1   0Â Â Â  -&gt;Â  -2
			Â  Â  Â  Â  Â  Â  Â  Â Â Â  Â 1   1Â Â Â  -&gt;Â  -1
<em>Scott</em> - Got it. Now if we look at signed Int2â€™s range, itâ€™s [-2, 1]. It does not include 2 and 3 as we have used these to represent negative numbers, 
Â  Â  Â  Â  Â  Â  Â  -2Â  &amp; -1 respectively.
<em>Shuri</em> - Exactly! 
<em>Scott</em> - Okayâ€¦now what if I want to store 3 for a signed Int?
<em>Shuri</em> -Â  For a signed Int, we donâ€™t have space to store 3 with just 2 bits, as with 2 bits we can only store values till 1. 
Â  Â  Â  Â  Â  Â  Â  Â Â  With 3 bits, you can store ranging from -4 to 3.
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â  Â 0   0Â   0Â Â  -&gt;Â  0Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â 1   0Â   0Â Â Â  -&gt;Â Â  -4
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â  Â 0   0Â   1Â Â  -&gt;Â  1 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 1   0Â   1Â Â Â  -&gt;Â Â  -3
			Â  Â  Â  Â  Â  Â  Â  Â Â  Â 0   1Â   0Â Â  -&gt;Â  2 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 1   1Â   0Â Â Â  -&gt;Â Â  -2
			Â  Â  Â  Â  Â  Â  Â  Â Â  Â 0   1Â   1Â Â  -&gt;Â  3 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 1   1Â   1Â Â Â  -&gt;Â Â  -1</p>

<p><em>Shuri</em> - Now if you see, we can actually deduce a formula for both signed and unsigned ranges. For n bits, unsigned range would be [0, 2n - 1],
Â  Â  Â  Â  Â  Â  Â  Â  and for signed range it would be [-2n-1, 2n-1 - 1].
<em>Scott</em> - So, is it correct to say that signed data types reduces the range, as with unsigned we can represent more values?
<em>Shuri</em> - I would not say it reduces the range, it actually shifts the range from positive values to negative values.
<em>Scott</em> - Makes sense. Okay, I have one last question, when we declare just Integer (Int) as data type, is that unsigned or signed?
Â  Â  Â  Â  Â  Â  Â  Â  And, how many bits it stores, because when we write Int we donâ€™t mention number of bits there?
<em>Shuri</em> - Good question!! By default itâ€™s signed. To make it unsigned, we have to write UInt.
Â  Â  Â  Â  Â  Â  Â  Â  And, how many bits it stores is dependent on the platform.
Â  Â  Â  Â  Â  Â  Â  Â  On 32 bit platform, it behaves as Int32. On 64 bit platform, it behaves as Int64.
Â  Â  Â  Â  Â  Â  Â  Â  You can actually check Swift documentation for Int which tells the same thing.</p>

<p><em>Scott</em> - Noiceeee. Thanks <em>Shuri</em>ðŸ™‚
<em>Shuri</em> - Anytime ðŸ™‚ And,Â donâ€™t forget to check other Data Types and their range.
<em>Scott</em> - Already on itâ€¦</p>
:ET
I"¥<p>A conversation between two friends about Signed &amp; UnSigned Data Types.</p>
<p><b><em>Scott</em></b> - Heyy...I was solving one question and it stated - "Given an unsigned Int...", and now I am slightly confused. What is unsigned data type and how it's different from basic data type like Int?</p>
<p><b><em>Shuri</em></b> - Okay, In short, Signed Data Types will store both negative and positive values, whereas Unsigned Data Types will store only positive values.</p>
<p><b><em>Shuri</em></b> - To know how they differs in terms of range, lets start with a Bit.</p>
<p><b><em>Scott</em></b> - Okay, great.</p>
<p><b><em>Shuri</em></b> - A bit can store either value 0 or 1. That means 2 possible values.</p>
<table>
<tbody>
<tr>
<th>Bit1</th>
<th>Value</th>
</tr>
<tr>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>2 bits can store 2 values(0 or 1) for each bit, that means we can represent or store 4 possible values with 2 bits.</p>
<table>
<tbody>
<tr>
<th>Bit1</th>
<th>Bit2</th>
<th>Value</th>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>2</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>Â  Â  Â Â </p>
<p><b><em>Scott</em></b> - Okay, that means with Int2, we can represent 0, 1, 2 &amp; 3. So, then the rangeÂ  for Int2 will be [0, 3], right?</p>
<p><b><em>Shuri</em></b> - Umm...wrong. The range for Unsigned Int2 would be [0, 3],Â  not for a signed Int2.</p>
<p><b><em>Shuri</em></b> - Signed Int will have both negative and positive values.</p>
<p><b><em>Scott</em></b> - Okay..but how do we represent a negative value in bit? You can only represent 0 or 1 in a bit right? You can't put a -ve or +ve sign.</p>
<p><b><em>Shuri</em></b> - Correct, you can't put -ve or +ve sign. But, there are ways to represent a negative value.</p>
<p>One way is to, invert the digits and add 1 to it. The resultant would represent its negative value.
Lets take 01 which represents 1.</p>
<pre><code>
01 -&gt; invert digitsÂ  -&gt; 10 -&gt; add 1 -&gt; 11  
</code></pre>
<p>Now, 11 represents -1.<br />
Btw, the above approach of inverting the digits and adding 1 to it is called 2â€™s complement.</p>
<p><b><em>Scott</em></b> - So, 11 which we used to represent 3 for unsigned Int2, can now now be used to represent -1 for signed Int2 right?</p>
<p><b><em>Shuri</em></b> - That's correct.Â  And, 1 0 can be used to represent -2, since `2's complement` of 1 0 is 1 0.</p>
<p><b><em>Shuri</em></b> - This way with the same number of bits we can be used to represent both positive and negative values.
          Signed Int2 will have these values:</p>
<table>
<tbody>
<tr>
<th>Bit1</th>
<th>Bit2</th>
<th>Value</th>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>-2</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>-1</td>
</tr>
</tbody>
</table>
<p>Â  Â  Â Â </p>
:ET